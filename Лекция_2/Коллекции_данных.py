# СПИСКИ
# list_1 = [] # Создание пустого списка
# list_2 = list() # Создание пустого списка через функцию
# list_1 = [7, 9, 11, 13, 15, 17]

# print(*list_1) # вывод массива без скобочек
# print(len(list_1)) # 6 чтобы узнать количество элементов в списке необходимо использовать функцию len(имя_списка)

# Заполнение списка вовремя работы программы
# list_1 = list() # создание пустого списка
# for i in range(5): # цикл выполнится 5 раз (можно заложить нужную длинну)
# n = int(input()) # пользователь вводит целое число
# list_1.append(n) # сохранение элемента в конец списка
# # 1-я итерация цикла(повторение 1): n = 12, list_1 = [12]
# # 2-я итерация цикла(повторение 2): n = 7, list_1 = [12, 7]
# # 3-я итерация цикла(повторение 3): n = -1, list_1 = [12, 7, -1]
# # 4-я итерация цикла(повторение 4): n = 21, list_1 = [12, 7, -1, 21]
# # 5-я итерация цикла(повторение 5): n = 0, list_1 = [12, 7, -1, 21, 0]
# print(list_1) # [12, 7, -1, 21, 0]


# ВЗАИМОДЕЙСТВИЕ С ЦИКЛОМ FOR :

# for i in list_1:
# print(i) # вывод каждого элемента списка
# # 1-я итерация цикла(повторение 1): i = 12
# # 2-я итерация цикла(повторение 2): i = 7
# # 3-я итерация цикла(повторение 3): i = -1
# # 4-я итерация цикла(повторение 4): i = 21
# # 5-я итерация цикла(повторение 5): i = 0

# list_1 = [12, 7, -1, 21, 0]
# for i in range(len(list_1)):
# print(list_1[i]) # вывод каждого элемента списка
# print(list_1[0 или 1 или 2]) # вывод конкретного элемента списка
# # 1-я итерация цикла(повторение 1): list_1[0] = 12
# # 2-я итерация цикла(повторение 2): list_1[1] = 7
# # 3-я итерация цикла(повторение 3): list_1[2] = -1
# # 4-я итерация цикла(повторение 4): list_1[3] = 21
# # 5-я итерация цикла(повторение 5): list_1[4] = 0

# 1. Удаление последнего элемента списка.
# Метод  ! pop ! удаляет последний элемент из списка:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop()) # 0
# print(list_1) # [12, 7, -1, 21]
# print(list_1.pop()) # 21
# print(list_1) # [12, 7, -1]

# 2. Удаление конкретного элемента из списка.
# Надо указать значение индекса в качестве аргумента функции pop:
# list_1 = [12, 7, -1, 21, 0]
# print(list_1.pop(0)) # 12
# print(list_1) # [7, -1, 21, 0]

# 3. Добавление элемента на нужную позицию.
# Функция ! insert ! — указание индекса (позиции) и значения.
# list_1 = [12, 7, -1, 21, 0]
# print(list1.insert(2, 11)) #где 2 это номер поз., а 11 это значение на которое нужно ВСТАВИТЬ
# print(list1) # [12, 7, 11, -1, 21, 0] # теперь 6 элементов

# 4. Добавление элемента в конец списка.
# Функция ! .append ! — указание индекса (позиции) и значения.
# list_1 = [12, 7, -1, 21, 0]
# print(list1.append (8))
# print(list1) # [12, 7, 11, -1, 21, 0, 8] 

# СРЕЗ СПИСКА способ вывода
# list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[0]) # 1
# print(list_1[1]) # 2
# print(list_1[len(list_1)-1]) # 10
# print(list_1[-5]) # 6
# print(list_1[:]) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list_1[:2]) # [1, 2]
# print(list_1[len(list_1)-2:]) #[9, 10]
# print(list_1[2:9]) # [3, 4, 5, 6, 7, 8, 9]
# print(list_1[6:-18]) # []
# print(list_1[0:len(list_1):6]) # [1, 7]
# print(list_1[::6]) # [1, 7]

# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# КОРТЕЖИ  - это неизменяемый список.
# t = () # создание пустого кортежа
# print(type(t)) # class <'tuple'>
# t = (1, 2, 5,) #в корнце всегда должнабыть запятая 
# print(type(t))

# v = [1, 2, 66, 10] #это просто массив
# print(type(t))
# v = tuple(v) #теперь это Кортеж
# print(type(t))

# Можно распаковать кортеж в независимые переменные:
# t = tuple([1, 2, 3])
# a, b, c = t # присвоили данные переменным
# print( a, b, c)

# t[0] = 1 # TypeError: 'tuple' object does not support(нельзя изменять кортеж)

# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# СЛОВАРИ — неупорядоченные коллекции произвольных объектов с доступом по ключу.
# ! В списках в качестве ключа используется индекс элемента. В словаре для определения элемента используется значение ключа (строка, число).
# d = {} # создание словаря
# d = dict() # создание словаря второй вариант
# d['q'] = 'значение 1' # создание первого ключа
# print(d)
# d['w'] = 'значение 2' # создание второго ключа
# print(d['q']) либо d['w']  # можно выводить по ключам

# dictionary = {} # создание словаря
# dictionary ={'up': '↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'} # полный вывод

# print(dictionary['left']) # ← #вывод одного элеиента по ключу
# # типы ключей могут отличаться
# print(dictionary['up']) # ↑ #вывод одного элеиента по ключу
# # типы ключей могут отличаться
# dictionary['left'] = '⇐'
# print(dictionary['left']) # ⇐
# print(dictionary['type']) # KeyError: 'type' ошибка вода такого ключа не сужествует 

# del dictionary['left'] # удаление элемента указываем ключ

# for item in dictionary: # for (k,v) in dictionary.items():  !!!!!!!взаимодействие с циклом
#   print('{}: {}'.format(item, dictionary[item])) # print(k, v)
# # up: ↑
# # down: ↓
# # right: →

# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# МНОЖЕСТВА - содержат в себе уникальные элементы, не обязательно упорядоченные
# !Одно множество может содержать значения любых типов. Если у Вас есть два множества, Вы можете совершать над ними любые стандартные операции,
# например, объединение, пересечение и разность.

# colors = {'red', 'green', 'blue'} # создание множества
# print(colors) # {'red', 'green', 'blue'}

# colors.add('red') # добавление уже существуещего элемента
# print(colors) # {'red', 'green', 'blue'} #НЕЧЕГО НЕ ПОЛУЧИТСЯ, ошибки не выведет
# colors.add('gray') # добавление элемента 
# print(colors) # {'red', 'gray', 'green', 'blue'} #добавиться в середине

# colors.remove('red') # удаление существуещего элемента
# print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red' # при повторном удаление НЕ существуещего элемента выведет ошибку
# colors.discard('red') # функция которая не останавливает программу при повторном удаление НЕ существуещего элемента
# print(colors) # {'green', 'blue','gray'}

# colors.clear() # { } # функция которая удаляет все элемеенты множества
# print(colors) # set()

# Операции со множествами в Python

# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy() # c = {1, 2, 3, 5, 8}  # копирование
# u = a.union(b) # u = {1, 2, 3, 5, 8, 13, 21} # объядинение !останутся только уник.элементы
# i = a.intersection(b) # i = {8, 2, 5} # сохранение только элементв которые пересекаються (есть в обоих множествах)
# dl = a.difference(b) # dl = {1, 3} # сохранение элементов которые НЕ пересекаються (в множестве "а" )
# dr = b.difference(a) # dr = {13, 21} # сохранение элементов которые НЕ пересикаються (в множестве "b" )
# q=a.union(b).difference(a.intersection(b)) # {1, 21, 3, 13} # пример функции набора нескольких операций

# !!!!!!Неизменяемое или замороженное множество(frozenset) — множество, с которым
# не будут работать методы удаления и добавления.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a)
# print(b) # frozenset({1, 2, 3, 5, 8})

# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# List comprehension — это упрощенный подход к созданию списка, который задействует цикл for,
# а также инструкции if-else для определения того, что в итоге окажется в финальном списке.
# 1. Простая ситуация — список:
# list_1 = [exp for item in iterable]
# 2. Выборка по заданному условию:
# list_1 = [exp for item in iterable (if conditional)]

            # Задача: Создать список, состоящий из четных чисел в диапазоне от 1 до 100.
# Решение:
# 1. Создать список чисел от 1 до 100 # стандартный долгий подход
# list_1 = []
# for i in range(1, 101):
#   list_1.append(i)
#   print(list_1) # [1, 2, 3,..., 100]

# !!!Эту же функцию можно записать так:!!!
# list_1 = [i for i in range(1, 101)] # [1, 2, 3,..., 100]

# 2. Добавить условие (только чётные числа)
# list_1 = [i for i in range(1, 101) if i % 2 == 0] # [2, 4, 6,..., 100]
  # Допустим, вы решили создать пары каждому из чисел (кортежи)
  # list_1 = [(i, i) for i in range(1, 101) if i % 2 == 0] # [(2, 2), (4, 4),...,(100, 100)]

# 3. Также можно умножать, делить, прибавлять, вычитать. Например, умножить значение на 2.
# list_1 = [i * 2 for i in range(10) if i % 2 == 0]
# print(list_1) # [0, 4, 8, 12, 16]